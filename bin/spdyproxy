#!/usr/bin/env node

// uncomment to obtain useful stack traces on exceptions
// require("long-stack-traces");

var newrelic = require('newrelic')
  , heapdump = require('heapdump')
  , path = require('path')
  , pkg = require('../package.json')
  , version = pkg.version
  , colors = require('colors')
  , spdyProxy = require('../lib/server')
  , plainSpdyProxy = require('../lib/plainserver')
  , fs = require('fs')
  , opts = require('optimist')
    .usage('Usage: $0')
    .options({
      key: {
        demand: true,
        alias: 'k',
        description: 'path to SSL key'
      },
      cert: {
        demand: true,
        alias: 'c',
        description: 'path to SSL certificate'
      },
      ca: {
        demand: false,
        alias: 'a',
        description: 'path to SSL CA certificate'
      },
      port: {
        demand: false,
        alias: 'p',
        description: 'proxy port',
        default: 44300
      },
      httpPort: {
        demand: false,
        alias: 'o',
        description: 'http proxy port',
        default: 8080
      },
      user: {
        demand: false,
        alias: 'U',
        description: 'basic auth username'
      },
      pass: {
        demand: false,
        alias: 'P',
        description: 'basic auth password'
      },
      'radius-server': {
        demand: false,
        description: 'RADIUS server hostname'
      },
      'radius-port': {
        demand: false,
        description: 'RADIUS port for authentication',
        default: 1812
      },
      'radius-secret': {
        demand: false,
        description: 'secret shared by RADIUS and NAS'
      },
      'radius-nasid': {
        demand: false,
        description: 'RADIUS NAS-Identifier',
        default: "spdyproxy"
      },
      'radius-creds-ttl': {
        demand: false,
        description: 'cache RADIUS user creds for X mins',
        default: 120
      },
      verbose: {
        demand: false,
        alias: 'v',
        description: 'enable verbose logging',
        default: false
      },
      requestCert:{
        demand:false,
        alias: 'C',
        description: 'request a certificate from a connecting client',
        type: 'boolean',
        default: false
      },
      localAddress:{
        demand:false,
        alias: 'B',
        description: 'Local interface to bind for network connections.',
      },
      logFile:{
        demand:false,
        alias: 'L',
        description: 'save request logs to a specific file'
      }
    }).argv;

opts.version = version;
opts.key = fs.readFileSync(path.resolve(opts.key));
opts.cert = fs.readFileSync(path.resolve(opts.cert));
if (opts.ca) opts.ca = fs.readFileSync(path.resolve(opts.ca));
if (opts.requestCert) opts.rejectUnauthorized=true;

process.on('uncaughtException', function(e) {
 console.error('Error: '.red + e);
});

var proxy = new spdyProxy.createServer(opts);
var plainProxy = new plainSpdyProxy.createServer(opts);

if (opts.user) {
  var CmdPwdHelper = require('../lib/cmdpwdhelper');
  cmdPwdHelper = new CmdPwdHelper(opts.user, opts.pass);
  proxy.setAuthHandler(cmdPwdHelper);
  plainProxy.setAuthHandler(cmdPwdHelper);
} else if (opts['radius-server']) {
  if (typeof opts['radius-secret'] !== 'string') {
    throw new Error('"radius-secret" must be specified.');
    process.exit();
  }

  var RADIUSHelper = require('../lib/radiushelper');
  radiusHelper = new RADIUSHelper(opts['radius-server'], opts['radius-port'],
                                  opts['radius-secret'], opts['radius-nasid'],
                                  opts['radius-creds-ttl'], opts.verbose);
  proxy.setAuthHandler(radiusHelper);
  plainProxy.setAuthHandler(radiusHelper);
}

if (opts.logFile) {
  var LoggingHelper = require('../lib/logginghelper');
  loggingHelper = new LoggingHelper(opts.logFile);
  proxy.setLogHandler(loggingHelper);
  plainProxy.setLogHandler(loggingHelper);
}

proxy.listen(opts.port);
plainProxy.listen(opts.httpPort);

console.log(
  "Started Secure SPDY proxy, port: ".green + opts.port
  + (" (v. %s)").grey, version
);
console.log(
  "Started Plain SPDY proxy, port: ".green + opts.httpPort
  + (" (v. %s)").grey, version
);